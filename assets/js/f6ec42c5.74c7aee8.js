"use strict";(self.webpackChunkayon_docs=self.webpackChunkayon_docs||[]).push([[485],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>v});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(n),h=i,v=u["".concat(l,".").concat(h)]||u[h]||c[h]||s;return n?a.createElement(v,r(r({ref:t},p),{},{components:n})):a.createElement(v,r({ref:t},p))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,r=new Array(s);r[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:i,r[1]=o;for(var d=2;d<s;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2609:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var a=n(7462),i=(n(7294),n(4137));const s={id:"dev_event_system",title:"Event system",sidebar_label:"Event system"},r=void 0,o={unversionedId:"dev_event_system",id:"dev_event_system",title:"Event system",description:"Ayon server event system is a robust feature designed to facilitate various tasks such as logging,",source:"@site/docs/dev_event_system.md",sourceDirName:".",slug:"/dev_event_system",permalink:"/ayon-documentation/docs/dev_event_system",draft:!1,editUrl:"https://github.com/ynput/ayon-documentation/tree/main/website/docs/dev_event_system.md",tags:[],version:"current",frontMatter:{id:"dev_event_system",title:"Event system",sidebar_label:"Event system"},sidebar:"Dev",previous:{title:"Colorspace",permalink:"/ayon-documentation/docs/dev_colorspace"},next:{title:"Aquarium",permalink:"/ayon-documentation/docs/addon_aquarium_developer"}},l={},d=[{value:"Overview",id:"overview",level:2},{value:"Event types",id:"event-types",level:3},{value:"Persistent events",id:"persistent-events",level:4},{value:"Fire-and-Forget Events",id:"fire-and-forget-events",level:4},{value:"Event data",id:"event-data",level:3},{value:"id",id:"id",level:4},{value:"hash",id:"hash",level:4},{value:"topic",id:"topic",level:4},{value:"Description",id:"description",level:4},{value:"Summary",id:"summary",level:4},{value:"payload",id:"payload",level:4},{value:"project",id:"project",level:4},{value:"user",id:"user",level:4},{value:"sender",id:"sender",level:4},{value:"depends_on",id:"depends_on",level:4},{value:"status",id:"status",level:4},{value:"retries",id:"retries",level:4},{value:"created_at",id:"created_at",level:4},{value:"updated_at",id:"updated_at",level:4},{value:"progress",id:"progress",level:4},{value:"Event Management",id:"event-management",level:2},{value:"Dispatching events",id:"dispatching-events",level:3},{value:"Updating Events",id:"updating-events",level:3},{value:"Deleting events",id:"deleting-events",level:3},{value:"Querying Events",id:"querying-events",level:3},{value:"Enroll Endpoint",id:"enroll-endpoint",level:2},{value:"Example scenario",id:"example-scenario",level:3}],p={toc:d},u="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Ayon server event system is a robust feature designed to facilitate various tasks such as logging,\njob control, audit trails, dependency management, and more. "),(0,i.kt)("p",null,"This document provides an overview of the event system and its components."),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"The event system is comprised of individual events, each with its own unique set of attributes and methods for handling payloads.\nEvents are organized by their topics, states, progress, and parent relationships. "),(0,i.kt)("p",null,"The event system also provides a set of functions for creating, updating, and deleting events,\nas well as querying events based on their attributes."),(0,i.kt)("h3",{id:"event-types"},"Event types"),(0,i.kt)("h4",{id:"persistent-events"},"Persistent events"),(0,i.kt)("p",null,"These events are stored in the database, allowing for a persistent record and easy retrieval for future reference.\nPersistent events are suitable for logging, job control, audit trails, and handling dependencies."),(0,i.kt)("h4",{id:"fire-and-forget-events"},"Fire-and-Forget Events"),(0,i.kt)("p",null,"This type of event does not require storage in the database.\nInstead, they are used for server-to-client or client-to-client notifications, alerts, and requests to update the user interface. "),(0,i.kt)("p",null,"Fire-and-forget events are transmitted to connected clients using a WebSockets connection."),(0,i.kt)("h3",{id:"event-data"},"Event data"),(0,i.kt)("h4",{id:"id"},"id"),(0,i.kt)("p",null,"The automatically assigned event ID ensures that each event is uniquely identifiable,\nThis ID is generated upon the creation of a new event and remains associated with the event throughout its lifecycle."),(0,i.kt)("h4",{id:"hash"},"hash"),(0,i.kt)("p",null,"An additional unique key that can be explicitly assigned by the endpoint or service responsible for creating the event.\nThe event hash is used to prevent duplicate events originating from the same source."),(0,i.kt)("p",null,"For example, a service that generates events from an external event system (for example ftrack) may use a checksum\nof its own topic combined with the external source ID as the event hash. "),(0,i.kt)("p",null,"This approach of using event hashes guarantees that duplicate events will not be created\neven if multiple instances of the same service (collecting the same data) run simultaneously."),(0,i.kt)("h4",{id:"topic"},"topic"),(0,i.kt)("p",null,"Topic is the only field which is required to provide, when a new event is created."),(0,i.kt)("p",null,"There are several built-in topics:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"entity.{entity_type}.created")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"entity.{entity_type}.data_changed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"entity.{entity_type}.label_changed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"entity.{entity_type}.type_changed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"entity.{entity_type}.thumbnail_changed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"entity.{entity_type}.active_changed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"entity.{entity_type}.deleted")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"entity.task.assignees_changed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"entity.subset.family_changed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"entity.version.author_changed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"entity.representation.files_changed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"log.debug")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"log.info")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"log.warning")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"log.error")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"log.success")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"server.restart_requested")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"settings.changed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"settings.deleted"))),(0,i.kt)("p",null,"They are dispatched by the server, usually as a response to user action (calling a rest endpoint).\nAddons may use their own topics. In that case, it is recommended to prefix the topic with the addon name."),(0,i.kt)("h4",{id:"description"},"Description"),(0,i.kt)("p",null,"A short, human-readable overview of the event.\nThis one-line description is displayed in the event viewer table and should not\ncontain sensitive information or entity IDs, as they might be confusing or misleading to users."),(0,i.kt)("h4",{id:"summary"},"Summary"),(0,i.kt)("p",null,"An event summary is a JSON object that encapsulates the most critical information about the event.\nIt provides a concise representation of the event data, allowing for quick reference and analysis."),(0,i.kt)("p",null,"For example, an event with the topic ",(0,i.kt)("inlineCode",{parentName:"p"},"entity.folder.created")," might contain a summary like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "ID_OF_THE_NEW_CREATED_FOLDER"\n}\n')),(0,i.kt)("p",null,"The structure (model) of the event summary must remain consistent within the same topic,\nensuring that any system components or clients handling the event can rely on the data format."),(0,i.kt)("h4",{id:"payload"},"payload"),(0,i.kt)("p",null,"The payload is a JSON object that contains the event data. Payload is only accessible via REST API."),(0,i.kt)("p",null,"The structure (model) of the event payload must remain consistent within the same topic,\nensuring that any system components or clients handling the event can rely on the data format."),(0,i.kt)("h4",{id:"project"},"project"),(0,i.kt)("p",null,"Name of the project event is scoped to. "),(0,i.kt)("p",null,"Note that there is no strict relation between this field and actual project name in the database.\nThis enables to keep the event in the database even if the project is deleted."),(0,i.kt)("h4",{id:"user"},"user"),(0,i.kt)("p",null,"Name of the user who created (or is responsible for) the event."),(0,i.kt)("p",null,"Note that there is no strict relation between this field and actual user name in the database.\nThis enables to keep the event in the database even if the user is deleted."),(0,i.kt)("h4",{id:"sender"},"sender"),(0,i.kt)("p",null,"Sender ID is a unique identifier used to tag events dispatched by a process.\nIt helps track the origin of events and enables the originating process to recognize\nits own messages when they are returned through a WebSocket stream."),(0,i.kt)("p",null,"The Sender ID can be the name of the service that generated the event or\nin a web-based application, the Sender ID can be the identifier of the browser tab that initiated the action."),(0,i.kt)("h4",{id:"depends_on"},"depends_on"),(0,i.kt)("p",null,"The event ID (if any) that initiated the current event, establishing a parent-child relationship between events.\nThis is explained in depth in the ",(0,i.kt)("strong",{parentName:"p"},"enroll")," section of this document"),(0,i.kt)("h4",{id:"status"},"status"),(0,i.kt)("p",null,"The current status of the event, represented by one of the following values:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pending")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"in_progress")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"finished")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"failed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"aborted")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"restarted"))),(0,i.kt)("p",null,"By default, events are created with the ",(0,i.kt)("inlineCode",{parentName:"p"},"finished")," state, which is suitable for one-shot events such as log messages.\nTo create an event with a ",(0,i.kt)("inlineCode",{parentName:"p"},"pending")," state, pass ",(0,i.kt)("inlineCode",{parentName:"p"},"finished=False")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatch_event")," function.\nTo update the status of an event, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"update_event")," function and set the status to the appropriate consecutive values."),(0,i.kt)("h4",{id:"retries"},"retries"),(0,i.kt)("p",null,"Number of times the event has been retried."),(0,i.kt)("h4",{id:"created_at"},"created_at"),(0,i.kt)("p",null,"Timestamp of the event creation."),(0,i.kt)("h4",{id:"updated_at"},"updated_at"),(0,i.kt)("p",null,"Timestamp of the event last update."),(0,i.kt)("h4",{id:"progress"},"progress"),(0,i.kt)("p",null,"The percentage of completion for the event."),(0,i.kt)("p",null,"The value is NOT stored in the database, but when ",(0,i.kt)("inlineCode",{parentName:"p"},"update_event")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"progress")," attribute is called, the value is\nbroadcasted using websocket connection to the connected clients - this may be used to update progress indicators in the UI."),(0,i.kt)("h2",{id:"event-management"},"Event Management"),(0,i.kt)("p",null,"The Ayon server event system offers various methods for managing events, including:"),(0,i.kt)("h3",{id:"dispatching-events"},"Dispatching events"),(0,i.kt)("p",null,"Events may be created using ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatch_event")," function in python or via ",(0,i.kt)("inlineCode",{parentName:"p"},"[POST] /api/events")," REST endpoint.\nAt least ",(0,i.kt)("inlineCode",{parentName:"p"},"topic")," must be specified in order to dispatch a new event."),(0,i.kt)("p",null,"By default, dispatched events are persistent (stored in the database). In order to create Fire-and-forget event,\nset the ",(0,i.kt)("inlineCode",{parentName:"p"},"store")," argument of ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatch_event")," function (or respective REST counterpart) to False."),(0,i.kt)("h3",{id:"updating-events"},"Updating Events"),(0,i.kt)("p",null,"Events can be updated by modifying their attributes, such as state and progress, to reflect the current status of the associated process."),(0,i.kt)("h3",{id:"deleting-events"},"Deleting events"),(0,i.kt)("p",null,"Users can delete events from the system, removing them from the database (for persistent events)."),(0,i.kt)("h3",{id:"querying-events"},"Querying Events"),(0,i.kt)("p",null,"The event system allows users to query events based on their attributes, such as topic, project, user and so on."),(0,i.kt)("p",null,"Querying is available using GraphQL API."),(0,i.kt)("h2",{id:"enroll-endpoint"},"Enroll Endpoint"),(0,i.kt)("p",null,"The enroll endpoint can be used by services to request a new job for processing."),(0,i.kt)("p",null,"Each job consists of a source event and a target event.\nThe source event is the event that triggered the job, while the target event is the event that should be created as a result of the job."),(0,i.kt)("p",null,"To use this endpoint, the service must provide the source and target event topics.\nIf there isn't already an existing event with the specified target topic for the same source event,\na new event will be created and returned."),(0,i.kt)("h3",{id:"example-scenario"},"Example scenario"),(0,i.kt)("p",null,"A smart coffe maker running Ayon service hosts brews coffee for the user each time a folder is approved."),(0,i.kt)("p",null,"The service periodically calls the enroll endpoint and when a new event with topic ",(0,i.kt)("inlineCode",{parentName:"p"},"entity.version.status_changed")," is emmited,\nand the new status is ",(0,i.kt)("inlineCode",{parentName:"p"},"Approved"),", a new event is created."),(0,i.kt)("p",null,"Services are language-agonstic, so any language or library may be used.\nThis is a minimal example using python ",(0,i.kt)("inlineCode",{parentName:"p"},"requests")," library. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import time\nimport requests\n\nfrom .config import config\n\ndef main():\n    session = requests.session()\n    session.headers.update(\n        {\n            "Content-Type": "application/json",\n            "X-Api-Key": config.api_key,\n        }\n    )\n\n    while True:\n        time.sleep(2)\n\n        # Enroll to the event\n        # Pass an additional filter to only receive events where the folder status is "Approved".\n        # For more information on filtering, see /api/query documentation\n\n        req = {\n            "sourceTopic": "entity.folder.status_changed",\n            "targetTopic": "example.brew_coffee_on_approve",\n            "sender": config.service_name,\n            "description": "Preparing to brew coffee on folder approval",\n            "filter": {\n                "conditions": [\n                    {\n                        "key": "payload/newValue",\n                        "value": "Approved",\n                    }\n                ]\n            }\n        }\n\n        try:\n            res = session.post(f"{config.server_url}/api/enroll", json=req)\n        except Exception as e:\n            print(e)\n            continue\n\n        # If there\'s nothing to do, just continue\n        if res.status_code != 200:\n            continue\n\n        enroll_data = res.json()\n\n        # If the status code is 200, the event was enrolled successfully, and the response\n        # contains the event id and the id of the event it depends on.\n        # The new event is created in the "pending" state.\n\n        source_event_id = enroll_data["dependsOn"]\n        target_event_id = enroll_data["id"]\n\n        # Load the source event data\n        source_event = session.get(f"{config.server_url}/api/events/{source_event_id}").json()\n        project_name = source_event["project"]\n        user_name = source_event["user"]\n\n        session.patch(\n            f"{config.server_url}/api/events/{target_event_id}", \n            json={\n                "status": "in_progress",\n                "description": f"Brewing coffee for {user_name}...",\n                "project": project_name,\n            }\n        )\n\n        # Insert your coffee brewing code here\n        # You can use the same patch request to update the progress\n        print(f"Brewing coffee for {user_name}...")\n        time.sleep(10)\n\n        # Mark the event as finished\n        session.patch(\n            f"{config.server_url}/api/events/{target_event_id}",\n            json={\n                "status": "finished",\n                "description": f"Coffee for {user_name} brewed successfully",\n            }\n        )\n\n\nif __name__ == "__main__":\n    main()\n')))}c.isMDXComponent=!0}}]);